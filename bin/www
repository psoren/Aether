#!/usr/bin/env node

//Module dependencies.
let app = require('../app');
let debug = require('debug')('newaether:server');
let http = require('http');

//Get port from environment and store in Express.
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//Create HTTP server. (For socket.io as well.)
let server = http.createServer(app);

//New socket stuff
let io = require('socket.io').listen(server);

//Server logic
require('../server/addUser.js')(io);
require('../server/addSongToPlaybackQueueInDb.js')(io);
require('../server/updateRoomNameInDb.js')(io);
require('../server/notifyClientToUpdateToken.js')(io);
require('../server/updateAccessToken.js')(io);
require('../server/nextSongServer.js')(io);
require('../server/togglePlaybackServer.js')(io);
require('../server/updateCreatorAccessTokenInDb.js')(io);
require('../server/disconnect.js')(io);

//Listen on provided port, on all network interfaces.
server.listen(port);
console.log(`Listening on port ${port}...`);
server.on('error', onError);
server.on('listening', onListening);

//Normalize a port into a number, string, or false.
function normalizePort(val) {
	let port = parseInt(val, 10);
	if (isNaN(port)) {return val;}
	if (port >= 0) {return port;}
	return false;
}

//Event listener for HTTP server "error" event.
function onError(error) {
	if (error.syscall !== 'listen') {throw error;}
	let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
	//Handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
		case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
		default:
		throw error;
	}
}

//Event listener for HTTP server "listening" event.
function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string'
	? 'pipe ' + addr
	: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
